{"version":3,"sources":["components/inputField/index.js","containers/ExampleForm/index.js","containers/Splash/index.js","App.js","index.js","components/inputField/input.module.css","containers/ExampleForm/form.module.css","containers/Splash/splash.module.css"],"names":["InputField","props","className","inputStyles","container","label","displayName","type","id","idName","input","onChange","handleInputChange","ExampleForm","e","target","value","setCurrValues","prevState","formStyles","form","btn","onClick","handleSubmit","Splash","useState","fName","lName","somethingElse","currValues","formSubmitted","setFormSubmitted","splashStyle","Object","entries","map","idx","key","bold","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"yOAaeA,EATI,SAACC,GAChB,OACI,sBAAKC,UAAWC,IAAYC,UAA5B,UACQ,mBAAGF,UAAWC,IAAYE,MAA1B,SAAkCJ,EAAMK,cACxC,uBAAOC,KAAK,OAAOC,GAAIP,EAAMQ,OAAQP,UAAWC,IAAYO,MAAOC,SAAUV,EAAMW,wB,gBC4BpFC,EA7BK,SAACZ,GAIjB,IAAMW,EAAoB,SAACE,GACvB,MAAoBA,EAAEC,OAAhBP,EAAN,EAAMA,GAAIQ,EAAV,EAAUA,MAGVf,EAAMgB,eAAc,SAAAC,GAAS,kCACtBA,GADsB,kBAExBV,EAAKQ,QAOd,OACI,sBAAKd,UAAWiB,IAAWf,UAA3B,UACI,sBAAKF,UAAWiB,IAAWC,KAA3B,UACI,cAAC,EAAD,CAAYX,OAAO,QAAQH,YAAY,cAAcM,kBAAmBA,IACxE,cAAC,EAAD,CAAYH,OAAO,QAAQH,YAAY,aAAaM,kBAAmBA,IACvE,cAAC,EAAD,CAAYH,OAAO,gBAAgBH,YAAY,2BAA2BM,kBAAmBA,OAEjG,wBAAQV,UAAWiB,IAAWE,IAAKC,QAASrB,EAAMsB,aAAlD,wB,gBCYGC,EA3BA,WACX,MAAoCC,mBAAS,CAAEC,MAAO,GAAIC,MAAO,GAAIC,cAAe,KAApF,mBAAOC,EAAP,KAAmBZ,EAAnB,KACA,EAA0CQ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KAQA,OAAOD,EACH,gCACI,kDACA,qBAAK5B,UAAW8B,IAAY5B,UAA5B,SACA,6BAAK6B,OAAOC,QAAQL,GAAYM,KAAI,WAAeC,GAAS,IAAD,mBAArBC,EAAqB,KAAhBrB,EAAgB,KACvD,OAAO,8BAAa,uBAAMd,UAAW8B,IAAYM,KAA7B,UAAoCD,EAApC,OAAb,IAA+DrB,IAAvDoB,aAKvB,gCACI,8CACA,cAAC,EAAD,CAAanB,cAAeA,EAAeM,aAlB9B,WACjBQ,GAAiB,UCRVQ,MARf,WACE,OACE,qBAAKrC,UAAU,MAAf,SACE,cAAC,EAAD,O,MCHNsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,UAAY,yBAAyB,MAAQ,qBAAqB,MAAQ,uB,kBCA5FD,EAAOC,QAAU,CAAC,UAAY,wBAAwB,KAAO,mBAAmB,IAAM,oB,kBCAtFD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,KAAO,wB","file":"static/js/main.b33fe872.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport inputStyles from \"./input.module.css\";\r\n\r\n// Nothing is stored here. Once again, we're using props to pass in functions that will change our currValue in Splash\r\nconst InputField = (props) => {\r\n    return (\r\n        <div className={inputStyles.container}>\r\n                <p className={inputStyles.label}>{props.displayName}</p>\r\n                <input type=\"text\" id={props.idName} className={inputStyles.input} onChange={props.handleInputChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputField;","import React from 'react';\r\nimport InputField from '../../components/inputField';\r\nimport formStyles from \"./form.module.css\";\r\n\r\n\r\n// You'll notice that ExampleForm exclusively uses props.\r\n// Since we passed in the setCurrValues, we're able to set the values of currValue from here.\r\nconst ExampleForm = (props) => {\r\n    // This function is actually passed into the InputField component. It runs every time the value of the InputField is changed\r\n    // You'll notice we're taking the id and value. This is because the id of the InputField component is set to the key of \r\n    // currValue. This way we don't have to make a handleInputChange for each InputField.\r\n    const handleInputChange = (e) => {\r\n        let { id, value } = e.target;\r\n\r\n        // We use the id of the InputField to determine the key we want to change the value of.\r\n        props.setCurrValues(prevState => ({\r\n            ...prevState,\r\n            [id]: value\r\n        }));\r\n    }\r\n\r\n    \r\n    // You'll notice that (despite the name), we're not actually using a form tag. This is because the onClick will call handleSubmit,\r\n    //  which uses the currValue which is already in the Splash component.\r\n    return(\r\n        <div className={formStyles.container}>\r\n            <div className={formStyles.form}>\r\n                <InputField idName=\"fName\" displayName=\"First Name:\" handleInputChange={handleInputChange} />\r\n                <InputField idName=\"lName\" displayName=\"Last Name:\" handleInputChange={handleInputChange} />\r\n                <InputField idName=\"somethingElse\" displayName=\"Something Else Probably:\" handleInputChange={handleInputChange} />\r\n            </div>\r\n            <button className={formStyles.btn} onClick={props.handleSubmit}>Submit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExampleForm;","import React, {useState} from 'react';\r\nimport ExampleForm from '../ExampleForm';\r\nimport splashStyle from \"./splash.module.css\";\r\n\r\n// Note: The form values are stored here via hook.\r\n//       They're stored in an object / dictionary and are updated via an onChange\r\n//       function declared in the Example Form component. You'll notice that we're\r\n//       passing our setCurrValues into the Form as a prop for the Form to use.\r\n\r\n//       You'll also notice we're storing whether the form has been submitted or not.\r\n//       And we're using the ternary operator (?) to return a different display depending\r\n//       on whether the form has been submitted.\r\n\r\n//       The ExampleForm toggles the handleSubmit function which sets formSubmitted to true.\r\n//       You can also set currValues to update in a similar way.\r\n\r\nconst Splash = () => {\r\n    const [currValues, setCurrValues] = useState({ fName: \"\", lName: \"\", somethingElse: \"\"});\r\n    const [formSubmitted, setFormSubmitted] = useState(false);\r\n\r\n    const handleSubmit = () => {\r\n        setFormSubmitted(true);\r\n    }\r\n\r\n    // Remember, the ternary operator will return the option to the left of the colon if formSubmitted is true\r\n    //   and will return the option to the right otherwise. \r\n    return formSubmitted ? (\r\n        <div>\r\n            <h1>Values Submitted</h1>\r\n            <div className={splashStyle.container}>\r\n            <h3>{Object.entries(currValues).map(([key, value], idx) => {\r\n                return <p key={idx}><span className={splashStyle.bold}>{key}:</span> {value}</p>\r\n            })}</h3>\r\n            </div>\r\n        </div>\r\n    ) : (\r\n        <div>\r\n            <h1>Example Form</h1>\r\n            <ExampleForm setCurrValues={setCurrValues} handleSubmit={handleSubmit} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Splash;","import Splash from './containers/Splash';\n\n// Just like your app, this one is calling in a component on the App.js.\n// You probably have a react router set up here!\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Splash />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"input_container__7nYzV\",\"label\":\"input_label__3R4co\",\"input\":\"input_input__2VcPl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"form_container__j0iXy\",\"form\":\"form_form__3Rs_Y\",\"btn\":\"form_btn__2wT7v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"splash_container__Y46YE\",\"bold\":\"splash_bold__2BlhO\"};"],"sourceRoot":""}